[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ainative-python"
version = "0.1.0"
authors = [
    {name = "AINative Team", email = "support@ainative.studio"},
]
description = "Official Python SDK for AINative Studio APIs"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "ainative", "database", "vector", "embedding", "ai", "ml",
    "machine learning", "artificial intelligence", "api", "sdk",
    "zerodb", "agent swarm", "postgresql", "vector search"
]
dependencies = [
    "requests>=2.25.0",
    "python-dateutil>=2.8.0", 
    "typing-extensions>=4.0.0",
    "pydantic>=2.0.0",
    "httpx>=0.24.0",
    "aiohttp>=3.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "isort>=5.10.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.19.0",
]
async = [
    "aiohttp>=3.8.0",
    "asyncio>=3.4.3",
]

[project.urls]
Homepage = "https://github.com/AINative-Studio/python-sdk"
Documentation = "https://docs.ainative.studio/sdk/python"
Repository = "https://github.com/AINative-Studio/python-sdk.git"
"Bug Reports" = "https://github.com/AINative-Studio/python-sdk/issues"
"API Reference" = "https://api.ainative.studio/docs-enhanced"

[project.scripts]
ainative = "ainative.cli:main"

[tool.setuptools.packages.find]
exclude = ["tests*", "examples*"]

[tool.setuptools.package-data]
ainative = ["py.typed"]

[tool.black]
line-length = 100
target-version = ["py38"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["ainative"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
]